syntax = "proto3";

package vending_machine.v1;

option go_package = "github.com/maze1377/manager-vending-machine/pkg/vendingMachineService";

//GetProduct

message GetProductRequest {}

message Product {
  string name = 1;
  int32 quantity = 2;
  float price = 3;
}

message GetProductResponse {
  repeated Product products = 1;
}

//ExecuteCommand

message SelectProductRequest {
  string product_name = 1;
}

message PaymentRequest {
  float amount = 1;
  string payment_method = 2;
}

message DispenseRequest {
  string product_name = 1;
}

message ExecuteCommandRequest {
  enum CommandType {
    COMMAND_TYPE_UNSPECIFIED = 0;
    COMMAND_TYPE_ADD_PRODUCT = 1;
    COMMAND_TYPE_SELECT_PRODUCT = 2;
    COMMAND_TYPE_PROCESS_PAYMENT = 3;
    COMMAND_TYPE_DISPENSE_PRODUCT = 4;
  }

  CommandType type = 1;
  string uid = 6;

  oneof payload {
    Product product = 2;
    SelectProductRequest select_product_request = 3;
    PaymentRequest payment_request = 4;
    DispenseRequest dispense_request = 5;
  }
}

message ExecuteCommandResponse {
  bool success = 1;
  string message = 2;
}

//NotifyEvent

message DispenseResponse {
  bool success = 1;
  string message = 2;
}

message PaymentResponse {
  bool success = 1;
  string message = 2;
}

message NotifyEventResponse {
  enum EventType {
    EVENT_TYPE_UNSPECIFIED = 0;
    EVENT_TYPE_PAYMENT_PROCESSED = 1;
    EVENT_TYPE_PRODUCT_DISPENSED = 2;
  }

  EventType type = 1;

  oneof payload {
    PaymentResponse payment_response = 2;
    DispenseResponse dispense_response = 3;
  }
}

message NotifyEventRequest {
  string uid = 6;
}

service VendingMachineService {
  rpc GetProduct(GetProductRequest) returns (GetProductResponse) {}
  rpc ExecuteCommand(stream ExecuteCommandRequest) returns (stream ExecuteCommandResponse) {}
  rpc NotifyEvent(NotifyEventRequest) returns (stream NotifyEventResponse) {}
}
