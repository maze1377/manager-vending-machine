// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	models "github.com/maze1377/manager-vending-machine/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// VendingState is an autogenerated mock type for the VendingState type
type VendingState struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: uid, product
func (_m *VendingState) AddItem(uid string, product *models.Product) error {
	ret := _m.Called(uid, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *models.Product) error); ok {
		r0 = rf(uid, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddObserver provides a mock function with given fields: id, fn
func (_m *VendingState) AddObserver(id string, fn func(models.Event, ...interface{})) {
	_m.Called(id, fn)
}

// DispenseProduct provides a mock function with given fields: uid, productName
func (_m *VendingState) DispenseProduct(uid string, productName string) error {
	ret := _m.Called(uid, productName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(uid, productName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProducts provides a mock function with given fields:
func (_m *VendingState) GetProducts() []*models.Product {
	ret := _m.Called()

	var r0 []*models.Product
	if rf, ok := ret.Get(0).(func() []*models.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Product)
		}
	}

	return r0
}

// InsertMoney provides a mock function with given fields: uid, coin
func (_m *VendingState) InsertMoney(uid string, coin float32) error {
	ret := _m.Called(uid, coin)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float32) error); ok {
		r0 = rf(uid, coin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveObserver provides a mock function with given fields: id
func (_m *VendingState) RemoveObserver(id string) {
	_m.Called(id)
}

// SelectProduct provides a mock function with given fields: uid, productName
func (_m *VendingState) SelectProduct(uid string, productName string) error {
	ret := _m.Called(uid, productName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(uid, productName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewVendingState interface {
	mock.TestingT
	Cleanup(func())
}

// NewVendingState creates a new instance of VendingState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVendingState(t mockConstructorTestingTNewVendingState) *VendingState {
	mock := &VendingState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
