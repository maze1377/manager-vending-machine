// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	metrics "github.com/maze1377/manager-vending-machine/internal/metrics"
	mock "github.com/stretchr/testify/mock"
)

// Metric is an autogenerated mock type for the Metric type
type Metric struct {
	mock.Mock
}

// NewCommunicator provides a mock function with given fields: c
func (_m *Metric) NewCommunicator(c metrics.CommunicatorConfig) metrics.Communicator {
	ret := _m.Called(c)

	var r0 metrics.Communicator
	if rf, ok := ret.Get(0).(func(metrics.CommunicatorConfig) metrics.Communicator); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Communicator)
		}
	}

	return r0
}

// NewCounter provides a mock function with given fields: c, labels
func (_m *Metric) NewCounter(c metrics.CounterConfig, labels ...string) metrics.Counter {
	_va := make([]interface{}, len(labels))
	for _i := range labels {
		_va[_i] = labels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, c)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 metrics.Counter
	if rf, ok := ret.Get(0).(func(metrics.CounterConfig, ...string) metrics.Counter); ok {
		r0 = rf(c, labels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Counter)
		}
	}

	return r0
}

// NewTimer provides a mock function with given fields: c, labels
func (_m *Metric) NewTimer(c metrics.TimerConfig, labels ...string) metrics.Timer {
	_va := make([]interface{}, len(labels))
	for _i := range labels {
		_va[_i] = labels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, c)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 metrics.Timer
	if rf, ok := ret.Get(0).(func(metrics.TimerConfig, ...string) metrics.Timer); ok {
		r0 = rf(c, labels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Timer)
		}
	}

	return r0
}

type mockConstructorTestingTNewMetric interface {
	mock.TestingT
	Cleanup(func())
}

// NewMetric creates a new instance of Metric. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMetric(t mockConstructorTestingTNewMetric) *Metric {
	mock := &Metric{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
